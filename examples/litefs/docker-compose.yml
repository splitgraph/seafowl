# Architecture:
#
#         reader
# NGINX   reader                       minio
#           v liteFS replication
#         writer
#
# Running:
# docker compose up --scale seafowl-reader=3 -d

services:
  minio:
    image: quay.io/minio/minio:RELEASE.2022-08-13T21-54-44Z
    entrypoint: sh
    command: -c 'mkdir -p /data/seafowl/ && minio server --console-address ":9001" /data'
    expose:
      - "9000"
      - "9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - minio-data:/data

  # Single "writer" instance
  seafowl-writer:
    build:
      dockerfile: seafowl/Dockerfile
    image: litefs-seafowl
    deploy:
      restart_policy:
        condition: unless-stopped

    # Get FUSE working inside the container
    cap_add:
      - SYS_ADMIN
    privileged: true
    devices:
      - /dev/fuse

    volumes:
      - ./configs/seafowl-writer:/etc/seafowl
      - litefs-data:/data/seafowl/litefs

  # "Reader" instances, arbitrarily scalable. Pull SQLite data from
  # the static "writer" instance
  seafowl-reader:
    build:
      dockerfile: seafowl/Dockerfile
    image: litefs-seafowl
    deploy:
      restart_policy:
        condition: unless-stopped

    # Get FUSE working inside the container
    cap_add:
      - SYS_ADMIN
    privileged: true
    devices:
      - /dev/fuse

    volumes:
      - ./configs/seafowl-reader:/etc/seafowl

  # NGINX proxy. When the URL is prefixed with /w/, it'll redirect
  # to the single writer instance. Otherwise, it'll redirect to one
  # of the reader replicas.
  nginx:
    image: nginx:1.23.1
    ports:
      - "8080:80"
    volumes:
      - ./configs/nginx:/etc/nginx/

volumes:
  # Data directory for the Minio instance storing Parquet files
  minio-data: {}
  # Data directory for the LiteFS data for the writer Seafowl instance
  litefs-data: {}
