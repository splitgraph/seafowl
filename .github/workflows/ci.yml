name: CI

on:
  push:

jobs:
  CI:
    name: Lint, build, test
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
      env:
        # set debuginfo to 1 (line tables only, for panic tracebacks)
        RUSTFLAGS: "-C debuginfo=1"

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db_test
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      # Setup pre-commit
      # From https://github.com/mozilla/grcov/blob/master/.github/workflows/CICD.yml
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install pre-commit
        run: python3 -m pip install --no-cache-dir pre-commit
      - name: Configure pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}
      - name: Install cmake
        run: apt-get update && apt-get install -y cmake

      # Use https://github.com/marketplace/actions/rust-cache

      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key
      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        with:
          # shared-key: ""
          # key: ""
          # env-vars: ""
          # workspaces: ""

          # Determines if the cache should be saved even when the workflow has failed.
          cache-on-failure: "true"

      # Setup the rest of the toolchain
      - name: Setup toolchain
        run: |
          rustup toolchain install stable
          rustup default stable
          rustup component add rustfmt clippy

      - name: Check pre-commit hooks (formatting and Clippy)
        run: |
          pre-commit run --all

      # NB this one doesn't run as a pre-commit hook
      - name: Check Cargo.toml formatting
        run: |
          cargo install cargo-tomlfmt
          find . -name 'Cargo.toml' -exec cargo tomlfmt -p {} \;
          git diff --exit-code

      - name: Build workspace in debug mode
        run: |
          cargo build

      # TODO split tests into unit and integration (one requires postgres?)
      - name: Run tests
        run: |
          cargo test
        env:
          # database URL for end-to-end + postgres repository tests
          DATABASE_URL: "postgres://postgres:postgres@postgres:5432/db_test"

      # TODO recompiles the whole thing with different flags (busting the cache?,
      #      also codecov needs a token for private repos; also this breaks in Docker
      #      because of security / ASLR disable fails)
      # - name: Run coverage
      #   run: |
      #     cargo install --version 0.20.1 cargo-tarpaulin
      #     cargo tarpaulin --all --out Xml

      # - name: Report coverage
      #   continue-on-error: true
      #   run: bash <(curl -s https://codecov.io/bash)
