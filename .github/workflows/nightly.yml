name: Build nightly binaries and perform releases

on:
  # For pushes to main, build binaries and store them as artifacts (also upload Docker images)
  # For pushes to main with tags, also make a GitHub release.
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  build_binary:
    name: Build the binaries
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        build: [linux, macos, win-msvc]
        include:
          - build: linux
            os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        with:
          # shared-key: ""
          # key: ""
          # env-vars: ""
          # workspaces: ""

          # Determines if the cache should be saved even when the workflow has failed.
          cache-on-failure: "true"

      - name: Build the release binary
        run: cargo build --release

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/release/seafowl"

      - name: Prepare artifact name
        shell: bash
        run: |
          echo "ARTIFACT=seafowl-nightly-${{ matrix.target }}" >> $GITHUB_ENV

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "SOURCE=target/release/seafowl.exe" >> $GITHUB_ENV
          else
            echo "SOURCE=target/release/seafowl" >> $GITHUB_ENV
          fi

      - name: Login to DockerHub (Linux only)
        if: matrix.build == 'linux'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker tags
        id: meta
        # https://github.com/docker/metadata-action
        uses: docker/metadata-action@v4
        with:
          images: |
            splitgraph/seafowl
          # Latest push to main: add nightly/latest tags
          # Tag pushes: add full version (e.g. 0.1.1) and major.minor (e.g. 0.1)
          tags: |
            type=raw,value=nightly,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image (Linux only)
        if: matrix.build == 'linux'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.SOURCE }}

  github_release:
    name: Perform GitHub release
    needs: build_binary
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_VERSION == ''
        run: |
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"

      - name: Get artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Package artifacts
        run: |
          tar -C artifacts/seafowl-nightly-x86_64-unknown-linux-gnu -czf seafowl-${{ env.RELEASE_VERSION }}-x86_64-unknown-linux-gnu.tar.gz seafowl
          tar -C artifacts/seafowl-nightly-x86_64-apple-darwin -czf seafowl-${{ env.RELEASE_VERSION }}-x86_64-apple-darwin.tar.gz seafowl
          cd artifacts/seafowl-nightly-x86_64-pc-windows-msvc && zip -r ../../seafowl-${{ env.RELEASE_VERSION }}-x86_64-pc-windows-msvc.zip seafowl.exe

      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          files: |
            seafowl-${{ env.RELEASE_VERSION }}-x86_64-unknown-linux-gnu.tar.gz
            seafowl-${{ env.RELEASE_VERSION }}-x86_64-apple-darwin.tar.gz
            seafowl-${{ env.RELEASE_VERSION }}-x86_64-pc-windows-msvc.zip
