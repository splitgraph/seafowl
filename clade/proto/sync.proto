syntax = "proto3";

package clade.sync;

import "schema.proto";

enum ColumnRole {
  // Denotes a column that that has the old value for a primary key column
  OLD_PK = 0;
  // Denotes a column that that has the new value for a primary key column
  NEW_PK = 1;
  // Denotes whether a particular column has changed in value
  CHANGED = 2;
  // Denotes the value of a non-PK column
  VALUE = 3;
}

message ColumnDescriptor {
  ColumnRole role = 1;
  string name = 2;
}

message DataSyncCommand {
  // Path to the Delta Table, relative to the root URL of the store below.
  // Will be created based on the schema of the RecordBatch if doesn't exist.
  // e.g. path/to/table
  string path = 1;

  // Root URL (e.g. s3://my-bucket) and connection options for the table's path
  schema.StorageLocation store = 2;

  // Metadata about the columns in the RecordBatch
  repeated ColumnDescriptor column_descriptors = 3;

  // Integer identifying data source
  string origin = 4;

  // Monotonically-increasing transaction number.
  // Only specified in the last message of a transaction
  optional uint64 sequence_number = 5;

  // Table format
  schema.TableFormat format = 6;
}

message DataSyncResponse {
  // If false, Seafowl is overloaded and can't accept the change (e.g.
  // can't flush fast enough). The client should wait and retry.
  // TODO: also schema mismatch errors
  bool accepted = 1;

  // Sequence number up to which the changes are in Seafowl's memory.
  optional uint64 memory_sequence_number = 2;

  // Sequence number up to which the changes are in Delta Lake.
  optional uint64 durable_sequence_number = 3;

  // Flag denoting whether this is the first response, and thus indicating
  // that Seafowl has just (re)started.
  bool first = 4;
}
